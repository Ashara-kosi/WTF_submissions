{
 "cells": [
  {
   "cell_type": "code",bjkj
   "execu
   "id": "d4039fe9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1.\tWrite a function to calculate the multiplication and sum of two 
numbers.\n",
    "def multiplication_sum(x,y):\n",
    "        print(x * y, x + y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ae47b872",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 9\n"
     ]
    }
   ],
   "source": [
    "multiplication_sum(5,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5d2b5471",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2.\tWrite a function to print the sum of the current number and the 
previous number\n",
    "def sum_current_previous(x):\n",
    "    previous = (x - 1)\n",
    "    print(int(previous + int(x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e4a8495a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n"
     ]
    }
   ],
   "source": [
    "sum_current_previous(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f225aa24",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3.\tWrite a function to print characters from a string that are 
present at an even index number\n",
    "def character_string():\n",
    "    A = 'Great'\n",
    "    B = []\n",
    "    C = A[0]\n",
    "    D = A[2]\n",
    "    E = A[4]\n",
    "    B.append(C)\n",
    "    B.append(D)\n",
    "    B.append(E)\n",
    "    print(B)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f0742d45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['G', 'e', 't']\n"
     ]
    }
   ],
   "source": [
    "character_string()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "b6f3fc0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def char_str(x):\n",
    "    A = []\n",
    "    for i in x[0:]:\n",
    "        A.append(i)\n",
    "        print(A[0:])       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "28938bfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['g']\n",
      "['g', 'r']\n",
      "['g', 'r', 'e']\n",
      "['g', 'r', 'e', 'a']\n",
      "['g', 'r', 'e', 'a', 't']\n"
     ]
    }
   ],
   "source": [
    "char_str('great')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "37262312",
   "metadata": {},
   "outputs": [],
   "source": [
    "def character_string():\n",
    "    x = 'characteristics'\n",
    "    i = 0\n",
    "    print('character present at even index:')\n",
    "    while i < len(x):\n",
    "        print(x[i])\n",
    "        i = i + 2\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7760cc2f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "character present at even index:\n",
      "c\n",
      "a\n",
      "a\n",
      "t\n",
      "r\n",
      "s\n",
      "i\n",
      "s\n"
     ]
    }
   ],
   "source": [
    "character_string()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "7563be2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is your name juliet\n"
     ]
    }
   ],
   "source": [
    "4.#Write a function to remove first characters from a string\n",
    "def remove_first_char( C = input('What is your name ')):\n",
    "    print(C.replace(C[0], ''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "55c429f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "uliet\n"
     ]
    }
   ],
   "source": [
    "remove_first_char()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "8579b795",
   "metadata": {},
   "outputs": [],
   "source": [
    "4.#Write a function to remove first characters from a string\n",
    "def remove_first_char(C):\n",
    "    print(C.replace(C[0], ''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "bc2548c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "uliet\n"
     ]
    }
   ],
   "source": [
    "remove_first_char('Juliet')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "206495d7",
   "metadata": {},
   "source": [
    "5.#Write a function to check if the first and last number of a list 
is the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0e1c263a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def first_last(list):\n",
    "    if list[0] == list[-1]:\n",
    "        print (True)\n",
    "    else:\n",
    "         print (False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9ea037e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "list=[2,4,5,6,8,7,5,45,6]\n",
    "first_last(list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ec715db",
   "metadata": {},
   "source": [
    "#3.\tWrite a function to print characters from a string that are 
present at an even index number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d8c39c34",
   "metadata": {},
   "outputs": [],
   "source": [
    "def character_string(x):\n",
    "    i = 0\n",
    "    print('character present at even index:')\n",
    "    while i < len(x):\n",
    "        print(x[i])\n",
    "        i = i + 2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f3436143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "character present at even index:\n",
      "c\n",
      "a\n",
      "a\n",
      "t\n",
      "r\n",
      "s\n",
      "i\n",
      "s\n"
     ]
    }
   ],
   "source": [
    "character_string()\n",
    "x= \"characteristics\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56f02aa8",
   "metadata": {},
   "source": [
    " 6. Write a function to print multiplication table from 1 to 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e1c41cfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mult_table(number):\n",
    "    for i in range (1,13):\n",
    "        multiply = number*i\n",
    "        table = str(number) + ' x ' + str(i) + ' = ' + 
str(multiply)\n",
    "        print (table)\n",
    "    \n",
    "    return\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "00486685",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 x 1 = 2\n",
      "2 x 2 = 4\n",
      "2 x 3 = 6\n",
      "2 x 4 = 8\n",
      "2 x 5 = 10\n",
      "2 x 6 = 12\n",
      "2 x 7 = 14\n",
      "2 x 8 = 16\n",
      "2 x 9 = 18\n",
      "2 x 10 = 20\n",
      "2 x 11 = 22\n",
      "2 x 12 = 24\n"
     ]
    }
   ],
   "source": [
    "mult_table(2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8dc04ae1",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (Temp/ipykernel_4368/1968250587.py, line 
3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File 
\u001b[1;32m\"C:\\Users\\DELL\\AppData\\Local\\Temp/ipykernel_4368/196825
0587.py\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    print 
(x*=i)\u001b[0m\n\u001b[1;37m            
^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m 
invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def mult_table(x):\n",
    "    while i in range(1,13):\n",
    "        print (x*=i)\n",
    "    x=x+1\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7993806c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

